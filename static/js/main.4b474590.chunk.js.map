{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","isInvalidValue","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","count","setCount","currentTitleValue","setCurrentTitleValue","currentDescriptionValue","setCurrentDescriptionValue","currentImgUrlValue","setCurrentImgUrlValue","currentImdbUrlValue","setCurrentImdbUrlValue","currentImdbIdValue","setCurrentImdbIdValue","pattern","isButtonAddActive","onSubmit","preventDefault","isImgUrlValid","test","isImdbUrlValid","invalidUrlMessage","currentCount","text","disabled","App","moviesFromServer","moviesList","setMoviesList","newMovie","currentMoviesList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4b474590.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label: string,\n  required?: boolean,\n  onChange: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label,\n  required = false,\n  onChange,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  const isInvalidValue = value === 'Invalid URL';\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || isInvalidValue,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {isInvalidValue && (\n        <p className=\"help is-danger\">Please enter valid URL</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\n\ntype Props = {\n  onAdd: (newMovie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [currentTitleValue, setCurrentTitleValue] = useState('');\n  const [currentDescriptionValue, setCurrentDescriptionValue] = useState('');\n  const [currentImgUrlValue, setCurrentImgUrlValue] = useState('');\n  const [currentImdbUrlValue, setCurrentImdbUrlValue] = useState('');\n  const [currentImdbIdValue, setCurrentImdbIdValue] = useState('');\n\n  // eslint-disable-next-line\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const isImgUrlValid = pattern.test(currentImgUrlValue);\n    const isImdbUrlValid = pattern.test(currentImdbUrlValue);\n    const invalidUrlMessage = 'Invalid URL';\n\n    if (!isImgUrlValid) {\n      setCurrentImgUrlValue(invalidUrlMessage);\n\n      return;\n    }\n\n    if (!isImdbUrlValid) {\n      setCurrentImdbUrlValue(invalidUrlMessage);\n\n      return;\n    }\n\n    const newMovie: Movie = {\n      title: currentTitleValue,\n      description: currentDescriptionValue,\n      imgUrl: currentImgUrlValue,\n      imdbUrl: currentImdbUrlValue,\n      imdbId: currentImdbIdValue,\n    };\n\n    onAdd(newMovie);\n\n    setCurrentTitleValue('');\n    setCurrentDescriptionValue('');\n    setCurrentImgUrlValue('');\n    setCurrentImdbUrlValue('');\n    setCurrentImdbIdValue('');\n    setCount(currentCount => currentCount + 1);\n  };\n\n  const handleTitleChange = (text: string) => {\n    setCurrentTitleValue(text);\n  };\n\n  const handleDescriptionChange = (text: string) => {\n    setCurrentDescriptionValue(text);\n  };\n\n  const handleImgUrlChange = (text: string) => {\n    setCurrentImgUrlValue(text);\n  };\n\n  const handleImdbUrlChange = (text: string) => {\n    setCurrentImdbUrlValue(text);\n  };\n\n  const handleImdbIdChange = (text: string) => {\n    setCurrentImdbIdValue(text);\n  };\n\n  const isButtonAddActive = currentTitleValue\n    && currentImgUrlValue\n    && currentImdbUrlValue\n    && currentImdbIdValue;\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={currentTitleValue}\n        onChange={handleTitleChange}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={currentDescriptionValue}\n        onChange={handleDescriptionChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={currentImgUrlValue}\n        onChange={handleImgUrlChange}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={currentImdbUrlValue}\n        onChange={handleImdbUrlChange}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={currentImdbIdValue}\n        onChange={handleImdbIdChange}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!isButtonAddActive}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App: React.FC = () => {\n  const [moviesList, setMoviesList] = useState(moviesFromServer);\n\n  const addMovie = (newMovie: Movie) => {\n    setMoviesList(currentMoviesList => [...currentMoviesList, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={moviesList} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}